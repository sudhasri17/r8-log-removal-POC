# The proguard configuration file for the following section is /Users/sjanarthanam/Android Samples/proguard/examples/android-plugin/build/intermediates/default_proguard_files/global/proguard-android-optimize.txt-7.0.0
# This is a configuration file for ProGuard.
# http://proguard.sourceforge.net/index.html#manual/usage.html
#
# Starting with version 2.2 of the Android plugin for Gradle, this file is distributed together with
# the plugin and unpacked at build-time. The files in $ANDROID_HOME are no longer maintained and
# will be ignored by new version of the Android plugin for Gradle.

# Optimizations: If you don't want to optimize, use the proguard-android.txt configuration file
# instead of this one, which turns off the optimization flags.
# Adding optimization introduces certain risks, since for example not all optimizations performed by
# ProGuard works on all versions of Dalvik.  The following flags turn off various optimizations
# known to have issues, but the list may not be complete or up to date. (The "arithmetic"
# optimization can be used if you are only targeting Android 2.0 or later.)  Make sure you test
# thoroughly if you go this route.
-optimizations !code/simplification/arithmetic,!code/simplification/cast,!field/*,!class/merging/*
-optimizationpasses 5
-allowaccessmodification

-dontusemixedcaseclassnames
-dontskipnonpubliclibraryclasses
-verbose

# Preserve some attributes that may be required for reflection.
-keepattributes *Annotation*,Signature,InnerClasses,EnclosingMethod

-keep public class com.google.vending.licensing.ILicensingService
-keep public class com.android.vending.licensing.ILicensingService
-keep public class com.google.android.vending.licensing.ILicensingService
-dontnote com.android.vending.licensing.ILicensingService
-dontnote com.google.vending.licensing.ILicensingService
-dontnote com.google.android.vending.licensing.ILicensingService

# For native methods, see http://proguard.sourceforge.net/manual/examples.html#native
-keepclasseswithmembernames,includedescriptorclasses class * {
    native <methods>;
}

# Keep setters in Views so that animations can still work.
-keepclassmembers public class * extends android.view.View {
    void set*(***);
    *** get*();
}

# We want to keep methods in Activity that could be used in the XML attribute onClick.
-keepclassmembers class * extends android.app.Activity {
    public void *(android.view.View);
}

# For enumeration classes, see http://proguard.sourceforge.net/manual/examples.html#enumerations
-keepclassmembers enum * {
    public static **[] values();
    public static ** valueOf(java.lang.String);
}

-keepclassmembers class * implements android.os.Parcelable {
    public static final ** CREATOR;
}

# Preserve annotated Javascript interface methods.
-keepclassmembers class * {
    @android.webkit.JavascriptInterface <methods>;
}

# The support libraries contains references to newer platform versions.
# Don't warn about those in case this app is linking against an older
# platform version. We know about them, and they are safe.
-dontnote android.support.**
-dontnote androidx.**
-dontwarn android.support.**
-dontwarn androidx.**

# This class is deprecated, but remains for backward compatibility.
-dontwarn android.util.FloatMath

# Understand the @Keep support annotation.
-keep class android.support.annotation.Keep
-keep class androidx.annotation.Keep

-keep @android.support.annotation.Keep class * {*;}
-keep @androidx.annotation.Keep class * {*;}

-keepclasseswithmembers class * {
    @android.support.annotation.Keep <methods>;
}

-keepclasseswithmembers class * {
    @androidx.annotation.Keep <methods>;
}

-keepclasseswithmembers class * {
    @android.support.annotation.Keep <fields>;
}

-keepclasseswithmembers class * {
    @androidx.annotation.Keep <fields>;
}

-keepclasseswithmembers class * {
    @android.support.annotation.Keep <init>(...);
}

-keepclasseswithmembers class * {
    @androidx.annotation.Keep <init>(...);
}

# These classes are duplicated between android.jar and org.apache.http.legacy.jar.
-dontnote org.apache.http.**
-dontnote android.net.http.**

# These classes are duplicated between android.jar and core-lambda-stubs.jar.
-dontnote java.lang.invoke.**

# End of content from /Users/sjanarthanam/Android Samples/proguard/examples/android-plugin/build/intermediates/default_proguard_files/global/proguard-android-optimize.txt-7.0.0
# The proguard configuration file for the following section is /Users/sjanarthanam/Android Samples/proguard/examples/android-plugin/proguard-project.txt
###############################################################################
# General settings.
###############################################################################

-verbose

# We can debug the ProGuard configuration by instrumenting the code and
# checking the log for feedback. Disable the option again for actual releases!

-addconfigurationdebugging

# We can also disable the individual processing steps.

#-dontshrink
#-dontoptimize
#-dontobfuscate

# Specifically target Android.

-android


###############################################################################
# Settings to handle reflection in the code.
###############################################################################

# Preserve annotated and generated classes for Dagger.

-keepclassmembers,allowobfuscation class * {
    @dagger.** *;
}

-keep class **$$ModuleAdapter
-keep class **$$InjectAdapter
-keep class **$$StaticInjection

-if   class **$$ModuleAdapter
-keep class <1>

-if   class **$$InjectAdapter
-keep class <1>

-if   class **$$StaticInjection
-keep class <1>

-keepnames class dagger.Lazy

# Preserve annotated and generated classes for Butterknife.

-keep class **$$ViewBinder {
    public static void bind(...);
    public static void unbind(...);
}

-if   class **$$ViewBinder
-keep class <1>

-keep class **_ViewBinding {
    <init>(<1>, android.view.View);
}

-if   class **_ViewBinding
-keep class <1>

# Preserve fields that are serialized with GSON.

#-keepclassmembers class com.example.SerializedClass1,
#                        com.example.SerializedClass2 {
#    <fields>;
#}

-keepclassmembers,allowobfuscation class * {
    @com.google.gson.annotations.SerializedName <fields>;
}

-keep,allowobfuscation @interface com.google.gson.annotations.**


###############################################################################
# Further optimizations.
###############################################################################

# If you wish, you can let the optimization step remove Android logging calls.

-assumenosideeffects class android.util.Log {
    public static boolean isLoggable(java.lang.String, int);
    public static int v(java.lang.String, java.lang.String);
    public static int i(...);
    public static int w(...);
    public static int d(java.lang.String, java.lang.String);
    public static int e(...);
}


-assumenosideeffects class com.example.Logger {
    public void logVerbose(java.lang.String, java.lang.String);
    public static void logDebug(java.lang.String, java.lang.String);
}
# In that case, it's especially useful to also clean up any corresponding
# string concatenation calls.


# End of content from /Users/sjanarthanam/Android Samples/proguard/examples/android-plugin/proguard-project.txt
# The proguard configuration file for the following section is /Users/sjanarthanam/Android Samples/proguard/examples/android-plugin/build/intermediates/aapt_proguard_file/debug/aapt_rules.txt
-keep class com.example.HelloWorldActivity { <init>(); }

# End of content from /Users/sjanarthanam/Android Samples/proguard/examples/android-plugin/build/intermediates/aapt_proguard_file/debug/aapt_rules.txt
# The proguard configuration file for the following section is <unknown>
-ignorewarnings
# End of content from <unknown>